library(shiny)
library(readr)
library(ggplot2)
library(dplyr)
library(DT)

data.all <- read_csv("https://www.stat2games.sites.grinnell.edu/data/greenhouse/getdata.php") 
data.all <- select(data.all, GroupID, PlayerID, Level, Season, SellPrice, BuyPrice, Crop, Money, Water, Nitrates, Yield, Profit)

# Revenue/Costs/Profit
data.all <- data.all %>% mutate(
  Revenue = SellPrice * Yield,
  Costs = BuyPrice + Water + ifelse((Nitrates - 250) / 10 < 0, 0, (Nitrates - 250) / 10),
  Profit = Revenue - Costs
)

data.all$Level <- as.factor(data.all$Level)
data.all$GroupID <- tolower(data.all$GroupID)
data.all$GroupID <- as.character(data.all$GroupID)
data.all$PlayerID <- as.character(data.all$PlayerID)

all_groups <- sort(unique(data.all$GroupID))
all_players <- sort(unique(data.all$PlayerID))
View(data.all)

# UI
ui <- fluidPage(
  
  titlePanel("Greenhouse RTutorial"),
  
  sidebarLayout(
    sidebarPanel(
      
      selectInput(inputId = "groupID",
                  label = "Group ID:", 
                  choices = c("all", all_groups),
                  multiple = TRUE,
                  selectize = TRUE,
                  selected = "all"),
      
      selectInput(inputId = "xvar",
                  label = "X Variable:",
                  choices = c("Water", "Nitrates"),
                  selected = "Water",
                  multiple = FALSE),
      
      selectInput(inputId = "yvar",
                  label = "Y Variable:",
                  choices = c("Yield", "Revenue", "Costs", "Profit"),
                  selected = "Yield",
                  multiple = FALSE),
      
      selectInput(inputId = "color",
                  label = "Color by",
                  choices = c("None", "Crop", "Season", "Plot", "PlayerID", "Water", "Nitrates"),
                  selected = "None",
                  multiple = FALSE),
      
      selectInput(inputId = "facet",
                  label = "Facet by:",
                  choices = c("None", "Level", "Season", "Crop"),
                  selected = "Level",
                  multiple = FALSE),
      
      selectInput(inputId = "model",
                  label = "Statistical Model:",
                  choices = c("None", "Linear", "Quadratic"),
                  multiple = FALSE,
                  selectize = TRUE,
                  selected = "None"),
      
      conditionalPanel(
        condition = "input.model == 'Linear' && !(input.facet == 'Crop' && input.color == 'Crop')",
        checkboxInput('bplot', "Remove Interaction", FALSE)
      ),
      
      selectInput(inputId = "fontsize",
                  label = "Font Size:",
                  choices = c(12, 16, 20),
                  multiple = FALSE,
                  selectize = TRUE,
                  selected = 12),
      
      selectInput(inputId = "fontcolor",
                  label = "Font Color:",
                  choices = c("black", "red", "blue"),
                  multiple = FALSE,
                  selectize = TRUE,
                  selected = "black"),
      
      downloadButton('downloadData', label = "Greenhouse Data")
    ),
    
    mainPanel(
      tabsetPanel(
        tabPanel("Plot", 
                 plotOutput(outputId = "Plot"),
                 h4("Code for Data Cleaning:"),
                 verbatimTextOutput("filterCode"),
                 h4("Code for Data Visualizations:"),
                 verbatimTextOutput("plotCode")
        ),
        tabPanel("Residual Plot",
                 plotOutput(outputId = "Residuals"),
                 h4("Code for Residual Plots:"),
                 verbatimTextOutput("residualsCode"))
      )
    )
  )
)

# Server
server <- function(input, output, session) {
  
  # Filter data --------------------------------------------------------------
  filteredData <- reactive({
    req(data.all)  # Ensure the dataset is loaded
    
    # Filter by Group ID
    if (length(input$groupID) > 0) {
      if ("all" %in% input$groupID) {
        plotData <- data.all
      } else {
        plotData <- data.all[data.all$GroupID %in% input$groupID, ]
      }
    } else {
      plotData <- data.all  # No filtering if no group selected
    }
    
    # Dynamically select columns based on user input for X and Y variables
    selected_columns <- unique(c("GroupID", "PlayerID", input$xvar, input$yvar, if(input$color != "None") input$color, "Level", if(input$facet != "None") input$facet))
    plotData <- plotData[, selected_columns, drop = FALSE]
    
    plotData
  })
  
  
  # Code for filtering data ----------------------------------------------------
  filterCode <- reactive({
    req(input$groupID)  # Ensure Group ID input is available
    
    # Start building the R code for filtering
    code <- "data <- readr::read_csv('https://www.stat2games.sites.grinnell.edu/data/greenhouse/getdata.php')\n"  # Start with the original dataset
    
    # Filter by Group ID
    if (length(input$groupID) > 0) {
      if ("all" %in% input$groupID) {
        code <- paste0(code, "plotData <- data\n")
      } else {
        code <- paste0(code, sprintf("plotData <- data[data$GroupID %%in%% c('%s'), ]\n", paste(input$groupID, collapse = "', '")))
      }
    }
    
    # Code to select specific columns based on X and Y variables
    selected_columns <- unique(c("GroupID", "PlayerID", input$xvar, input$yvar, if(input$color != "None") input$color, if(input$facet != "None") input$facet))
    select_code <- paste("c('", paste(selected_columns, collapse = "', '"), "')", sep="")
    code <- paste0(code, sprintf("plotData <- plotData[, %s, drop = FALSE]\n", select_code))
    
    code
    
  })
  
  output$filterCode <- renderText({
    req(filterCode())
    filterCode()
  })
  

  # Generate plot --------------------------------------------------------------
  output$Plot <- renderPlot({
    plotData <- filteredData()  # Assuming filteredData() is defined elsewhere to return the data frame
    
    # Base plot
    myplot <- ggplot(data = plotData, aes_string(x = input$xvar, y = input$yvar)) +
      xlab(input$xvar) + ylab(input$yvar)
    myplot <- myplot + geom_point(position = position_dodge(0.8))
    
    # Color by
    if (input$color != "None") {
      myplot <- myplot + aes_string(color = input$color)
    }
        
    # facet by
    if (input$facet != "None") {
      myplot <- myplot + facet_wrap(as.formula(paste("~", input$facet))) +
        labs(title = paste("Plot of ", input$yvar, "by", input$xvar, "and Faceted by type of", input$facet))
    }
    

    # add model
    if (input$model == "Linear") {
      if (input$bplot && (input$color == "Crop" || input$color == "PlayerID" )) {
        
        # Fit linear model with common slope but different intercepts
        lm_model <- lm(as.formula(paste(input$yvar, "~", input$xvar, "+", input$color)), data = plotData)
        intercepts <- coef(lm_model)[1] + coef(lm_model)[grep(input$color, names(coef(lm_model)))]
        slope <- coef(lm_model)[2]
        colors <- unique(plotData[[input$color]])
        
        myplot <- myplot + geom_abline(intercept = coef(lm_model)[1], slope = slope)
        
        for (i in seq_along(colors)) {
          myplot <- myplot + 
            geom_abline(intercept = intercepts[i],
                        slope = slope)
        }
        
        if (input$facet != "None") {
          myplot <- myplot + stat_smooth(method = "lm", se = FALSE, formula = y ~ x + input$color)
        }
      } else {
        myplot <- myplot + geom_smooth(method = 'lm', se = FALSE) 
      }
      
    } else if (input$model == "Quadratic") {
        myplot <- myplot + geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) 
    } else {
      myplot <- myplot 
    }

    
    # Apply font size and color customization
    myplot <- myplot + theme(text = element_text(size = as.numeric(input$fontsize), color = input$fontcolor))
    
    myplot
  })
  
  # Code for generating plot  --------------------------------------------------
  plotCode <- reactive({
    req(input$xvar, input$yvar)
    
    code <- sprintf("ggplot(data = plotData, aes(x = %s, y = %s", input$xvar, input$yvar)
    if (input$color != "None") {
      code <- paste0(code, sprintf(", color = %s", input$color))
    }
    code <- paste0(code, ")) +\n")
    
    if (input$model == "Linear") {
      code <- paste0(code, "  geom_smooth(method = 'lm', se = FALSE) +\n  geom_point(position = position_dodge(0.8)) +\n")
    } else if (input$model == "Quadratic") {
      code <- paste0(code, "  geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +\n  geom_point(position = position_dodge(0.8)) +\n")
    } else {
      code <- paste0(code, "  geom_point(position = position_dodge(0.8)) +\n")
    }
    
    code <- paste0(code, sprintf("  xlab('%s') +\n  ylab('%s')", input$xvar, input$yvar))
    
    if (input$facet != "None") {
      code <- paste0(code, sprintf(" +\n  facet_wrap(~ %s) +\n", input$facet))
      code <- paste0(code, sprintf("  labs(title = 'Plot of %s by %s and Faceted by type of %s')", input$yvar, input$xvar, input$facet))
    }
    
    # Adding font size and color customization
    code <- paste0(code, sprintf(" +\n  theme(text = element_text(size = %s, color = '%s'))", input$fontsize, input$fontcolor))
    
    code
  })
  
  output$plotCode <- renderText({
    req(plotCode())
    plotCode()  # Display the dynamically generated R code for plotting
  })
  
  
  # Residual plot --------------------------------------------------------------
  residualsCode <- reactive({
    req(input$xvar, input$yvar, input$model)
    
    xvar <- input$xvar
    yvar <- input$yvar
    model_code <- ""
    
    if (input$model == "Linear") {
      model_code <- sprintf("lm(%s ~ %s, data = filteredData)", yvar, xvar)
    } else if (input$model == "Quadratic") {
      model_code <- sprintf("lm(%s ~ poly(%s, 2), data = filteredData)", yvar, xvar)
    }
    
    code <- paste0(
      "# Fit the model\n",
      "myModel <- ", model_code, "\n\n",
      "# Calculate residuals\n",
      "filteredData$residuals <- resid(myModel)\n\n",
      "# Plotting with ggplot2\n",
      "p1 <- ggplot(filteredData, aes(x = residuals", if (input$color != "None") sprintf(", color = %s", input$color), ")) +\n",
      "  geom_histogram(binwidth = 0.5) +\n",
      "  ggtitle('Histogram of Residuals') +\n",
      "  xlab('Residuals')\n\n",
      "p2 <- ggplot(filteredData, aes(sample = residuals", if (input$color != "None") sprintf(", color = %s", input$color), ")) +\n",
      "  stat_qq() +\n",
      "  stat_qq_line() +\n",
      "  ggtitle('Normal Q-Q Plot of Residuals')\n\n",
      "p3 <- ggplot(filteredData, aes(x = ", xvar, ", y = residuals", if (input$color != "None") sprintf(", color = %s", input$color), ")) +\n",
      "  geom_point() +\n",
      "  geom_hline(yintercept = 0, linetype = 'dashed') +\n",
      "  ggtitle(paste('", xvar, " vs Residuals')) +\n",
      "  xlab('", xvar, "') +\n",
      "  ylab('Residuals')",
      if (input$facet != "None") paste0(" +\n  facet_wrap(~ ", input$facet, ")"),
      "\n\n",
      "gridExtra::grid.arrange(p1, p2, p3, ncol = 2)"
    )
    
    code
  })
  
  
  # Output the residuals code as text
  output$residualsCode <- renderText({
    req(residualsCode())
    residualsCode()
  })
  
  # Render residuals plot
  output$Residuals <- renderPlot({
    shiny::validate(
      need(input$model != "None", "A statistical model must be selected before residuals can be calculated.")
    )
    
    plotData <- filteredData()
    xvar <- input$xvar
    yvar <- input$yvar
    
    if (input$model == "None") {
      "A statistical model must be selected before residuals can be calculated."
    } else {
      if (input$model == "Linear") {
        myModel <- lm(as.formula(paste(yvar, "~", xvar)), data = plotData)
      } else if (input$model == "Quadratic") {
        myModel <- lm(as.formula(paste(yvar, "~ poly(", xvar, ", 2)")), data = plotData)
      }
      
      plotData$residuals <- resid(myModel)
      
      p1 <- ggplot(plotData, aes_string(x = "residuals", color = if (input$color != "None") input$color else NULL)) +
        geom_histogram(binwidth = 0.5) +
        ggtitle("Histogram of Residuals") +
        xlab("Residuals")
      
      p2 <- ggplot(plotData, aes_string(sample = "residuals", color = if (input$color != "None") input$color else NULL)) +
        stat_qq() +
        stat_qq_line() +
        ggtitle("Normal Q-Q Plot of Residuals")
      
      p3 <- ggplot(plotData, aes_string(x = xvar, y = "residuals", color = if (input$color != "None") input$color else NULL)) +
        geom_point() +
        geom_hline(yintercept = 0, linetype = "dashed") +
        ggtitle(paste(xvar, "vs Residuals")) +
        xlab(xvar) +
        ylab("Residuals")
      
      if (input$facet != "None") {
        p1 <- p1 + facet_wrap(as.formula(paste("~", input$facet)))
        p2 <- p2 + facet_wrap(as.formula(paste("~", input$facet)))
        p3 <- p3 + facet_wrap(as.formula(paste("~", input$facet)))
      }
      
      gridExtra::grid.arrange(p1, p2, p3, ncol = 2)
    }
  })
  
  # Download filtered data -----------------------------------------------------
  output$downloadData <- downloadHandler(
    filename = function() {
      paste('Data-', Sys.Date(), '.csv', sep="")
    },
    content = function(con) {
      write.csv(filteredData(), con)
    }
  )
  
}

# Running Shiny App
shinyApp(ui = ui, server = server)
